import torch as tr
from torch import nn as nn
from torch.nn import functional as F
from torch import optim as optim


class GatedConvolution(nn.Module):
    def __init__(self):
        super(GatedConvolution, self).__init__()
        self.conv = nn.Conv1d(1, 128, 500, stride=500)
        self.convg = nn.Conv1d(1, 128, 500, stride=500)

    def forward(self, x):
        c = self.conv(x)
        g = F.sigmoid(self.convg(x))
        x = F.relu(g * c)
        return F.max_pool1d(x, x.size()[2:])


def main():
    net = nn.Sequential(nn.Embedding(256, 8),
                        GatedConvolution(),
                        )


if __name__ == '__main__':
    main()
